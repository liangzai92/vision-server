generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  name        String?      @unique @default(uuid())
  password    String?
  userProfile UserProfile?
}

model UserProfile {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  email         String?
  nickname      String?
  bio           String?
  wechatId      String?
  githubId      String?
  zhiYinLouInfo ZhiYinLouInfo?
  indexNodes    IndexNode[]
  acls          Acl[]

  userId   String   @unique @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  groupIDs String[] @db.ObjectId
  groups   Group[]  @relation(fields: [groupIDs], references: [id])
}

model ZhiYinLouInfo {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  workcode   String? @unique
  account    String? @unique
  account_id String? @unique
  yachid     String? @unique
  email      String? @unique
  name       String?

  userId String      @unique @db.ObjectId
  user   UserProfile @relation(fields: [userId], references: [userId])
}

model Group {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  name String @unique

  userIDs String[]      @db.ObjectId
  users   UserProfile[] @relation(fields: [userIDs], references: [id])
}

model Acl {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  indexNodeId String    @db.ObjectId
  indexNode   IndexNode @relation(fields: [indexNodeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  userId String      @db.ObjectId
  user   UserProfile @relation(fields: [userId], references: [userId])

  permissions String

  @@unique([indexNodeId, userId])
}

// Hierarchies
model IndexNode {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  parentId String?    @db.ObjectId
  parent   IndexNode? @relation("NodeToParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  children    IndexNode[] @relation("NodeToParent")
  path        String?
  permissions String?

  ownerId String      @db.ObjectId
  owner   UserProfile @relation(fields: [ownerId], references: [userId])

  acls Acl[]
  type String @default("-")
  item Item?
}

model Item {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  type           String?      @default("project")
  name           String?
  description    String?
  cover          String?
  version        String?
  onlineVersion  String?
  previewVersion String?
  testVersion    String?
  devVersion     String?
  published      Boolean?     @default(false)
  records        ItemRecord[]
  typeData       Json?

  indexNodeId String     @unique @db.ObjectId
  indexNode   IndexNode? @relation(fields: [indexNodeId], references: [id])
}

model ItemRecord {
  createdAt DateTime @default(now())
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  itemId  String  @db.ObjectId
  item    Item    @relation(fields: [itemId], references: [id])
  version String?
  data    Json?
}
